$breakpoints: (
	small: 700,
	medium: 1000,
	large: 1300
);

@mixin media-width($arguments...) {

	$media-query: '';

	// Multiple rules list style.
	@if type-of(nth($arguments, 1)) == list {

		$media-rules-list: ();

		@each $argument in $arguments {
			$rule: media-width__generate-rule(nth($argument, 1), nth($argument, 2));
			$media-rules-list: append($media-rules-list, $rule);
		}

		@for $rule from 1 through length($media-rules-list) {
			@if $rule > 1 {
				$media-query: $media-query + ' and ';
			}
			$media-query: $media-query + nth($media-rules-list, $rule);
		}

	}

	// Single rule string style
	@else if type-of(nth($arguments, 1)) == string and type-of(nth($arguments, 2)) == string {

		$rule: media-width__generate-rule(nth($arguments, 1), nth($arguments, 2));
		$media-query: $media-query + $rule

	}

	@else {
		@error "Invalid arguments: should be a pair of strings, or lists of string pairs.";
	}

	// Print out the media query.
	@media #{$media-query} {
		@content;
	}

}

@function media-width__generate-rule($modifier, $breakpoint) {

	@if map-has-key($breakpoints, $breakpoint) {

		$media-query: '';
		$breakpoint-number: map-get($breakpoints, $breakpoint);
		$modifier-character-1: str-slice($modifier, 1, 1);
		$modifier-character-2: str-slice($modifier, 2, 2);
		
		// Less than (use max-width).
		@if $modifier-character-1 == '<' {
			@if $modifier-character-2 != '=' {
				$breakpoint-number: $breakpoint-number - 1;
			}
			@return $media-query + '(max-width: #{$breakpoint-number + px})';
		}

		// Greater than (use min-width).
		@else if $modifier-character-1 == '>' {
			@if $modifier-character-2 != '=' {
				$breakpoint-number: $breakpoint-number + 1;
			}
			@return $media-query + '(min-width: #{$breakpoint-number + px})';
		}

	}

	@else {
		@error "Invalid argument: `#{$breakpoint}` is not a breakpoint in the breakpoint map";
	}

}

// Example

body {
	@include media-width('<', small) {
		background-color: red;
	}
	@include media-width(('>=', small), ('<', medium)) {
		background-color: green;
	}
	@include media-width('>=', medium) {
		background-color: blue;
	}
}